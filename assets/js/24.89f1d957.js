(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{379:function(t,a,e){"use strict";e.r(a);var s=e(42),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("img",{attrs:{src:"https://tva1.sinaimg.cn/large/006y8mN6ly1g9asa3gs51j30go08caa5.jpg",alt:""}})]),t._v(" "),e("p",[t._v("Git是一个常用的工具，与github一同使用。")]),t._v(" "),e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("p",[t._v("Git是提交记录的集合。")]),t._v(" "),e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("p",[t._v("Mac下已自带git。")]),t._v(" "),e("p",[t._v("Windows需自行下载。到官网下载"),e("code",[t._v("git for windows")]),t._v("，双击安装包进行安装，注意在Terminal Emulator的设置中选择Use Windows' default console window，这样就可以在cmd中使用git命令。")]),t._v(" "),e("p",[t._v("打开cmd，输入git，检查是否安装成功。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://gitforwindows.org/\n")])])]),e("h2",{attrs:{id:"新手使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新手使用"}},[t._v("#")]),t._v(" 新手使用")]),t._v(" "),e("p",[t._v("以下为创建/克隆一个仓库并完成提交的过程，按照命令顺序执行即可。")]),t._v(" "),e("h3",{attrs:{id:"连接到github账号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接到github账号"}},[t._v("#")]),t._v(" 连接到Github账号")]),t._v(" "),e("p",[t._v("只需配置一次。打开终端输入以下代码，一路回车生成密钥。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git config --global user.name "github的用户名"\ngit config --global user.email "github的注册邮箱地址"\nssh-keygen -t rsa -C "github的注册邮箱地址" \n')])])]),e("p",[t._v("密钥默认生成在用户目录下的"),e("code",[t._v(".ssh")]),t._v("文件夹内。打开id_rsa.pub，复制所有内容后，在网页上登录Github，点击头像，选择Settings-SSH and GPG keys，选择New SSH key，名称任取，内容把刚才复制的粘贴上去，保存即可。")]),t._v(" "),e("h3",{attrs:{id:"本地新建仓库或克隆现有仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地新建仓库或克隆现有仓库"}},[t._v("#")]),t._v(" 本地新建仓库或克隆现有仓库")]),t._v(" "),e("h4",{attrs:{id:"本地新建仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地新建仓库"}},[t._v("#")]),t._v(" 本地新建仓库")]),t._v(" "),e("p",[t._v("即仓库初始化，只需在第一次新建仓库时执行。在终端切换到工作目录，然后执行以下命令以创建本地仓库。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git init\n")])])]),e("h4",{attrs:{id:"克隆现有仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#克隆现有仓库"}},[t._v("#")]),t._v(" 克隆现有仓库")]),t._v(" "),e("p",[t._v("克隆仓库则无需对仓库进行初始化。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 创建本地仓库的克隆版本\ngit clone /path/to/repository\n\n# 创建远程服务器仓库的克隆版本\ngit clone git@github.com:[用户名]/[仓库名].git\n")])])]),e("h3",{attrs:{id:"设定远程仓库地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设定远程仓库地址"}},[t._v("#")]),t._v(" 设定远程仓库地址")]),t._v(" "),e("p",[t._v("只需在第一次新建仓库时执行，需要在Github网页版上先新建好仓库。对于同一个本地仓库而言，该命令只在初始化仓库时执行。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote add origin git@github.com:[用户名]/[仓库名].git\n")])])]),e("p",[t._v("其余可用命令如下。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("命令")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("git remote add origin "),e("url")],1),t._v(" "),e("td",[t._v("注册远程版本库")])]),t._v(" "),e("tr",[e("td",[t._v("git remote set-url origin "),e("url")],1),t._v(" "),e("td",[t._v("修改远程版本库地址")])]),t._v(" "),e("tr",[e("td",[t._v("git remote rename origin origin1")]),t._v(" "),e("td",[t._v("重命名远程版本库")])]),t._v(" "),e("tr",[e("td",[t._v("git remote rm origin")]),t._v(" "),e("td",[t._v("删除远程版本库")])]),t._v(" "),e("tr",[e("td",[t._v("git remote update")]),t._v(" "),e("td",[t._v("更新所有注册的远程版本库")])])])]),t._v(" "),e("h3",{attrs:{id:"工作流处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作流处理"}},[t._v("#")]),t._v(" 工作流处理")]),t._v(" "),e("p",[t._v("每次进行修改后均要执行。工作流有三个部分，其中工作目录用于存放原始文件，暂存区用于临时保存改动，HEAD指向最后一次提交的结果。")]),t._v(" "),e("h4",{attrs:{id:"提交到暂存区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交到暂存区"}},[t._v("#")]),t._v(" 提交到暂存区")]),t._v(" "),e("p",[t._v("添加所有文件的命令如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add .\n")])])]),e("p",[t._v("其余可用命令如下。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("命令")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("git add [文件名]")]),t._v(" "),e("td",[t._v("添加特定文件")])]),t._v(" "),e("tr",[e("td",[t._v("git add -i")]),t._v(" "),e("td",[t._v("交互式添加文件")])]),t._v(" "),e("tr",[e("td",[t._v("git add -u")]),t._v(" "),e("td",[t._v("将（被版本库追踪的）本地文件的变更（修改、删除）全部记录到暂存区中")])]),t._v(" "),e("tr",[e("td",[t._v("git add -A")]),t._v(" "),e("td",[t._v("将工作区中的所有改动及新增文件添加到暂存区")])]),t._v(" "),e("tr",[e("td",[t._v("git add -p [文件名]")]),t._v(" "),e("td",[t._v("选择文件中需要commit的修改（修改文件后git会进行记录，运行本命令时会显示所有改动并询问哪些改动需要被提交）")])]),t._v(" "),e("tr",[e("td",[t._v("git rm -r [文件名]")]),t._v(" "),e("td",[t._v("删除文件")])]),t._v(" "),e("tr",[e("td",[t._v("git rm --cached [文件名]")]),t._v(" "),e("td",[t._v("直接从暂存区删除文件")])]),t._v(" "),e("tr",[e("td",[t._v("git clean -fd")]),t._v(" "),e("td",[t._v("清理未跟踪的文件和目录")])]),t._v(" "),e("tr",[e("td",[t._v("git clean -nd")]),t._v(" "),e("td",[t._v("测试上面命令会删除哪些文件")])])])]),t._v(" "),e("h4",{attrs:{id:"提交到head"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交到head"}},[t._v("#")]),t._v(" 提交到HEAD")]),t._v(" "),e("p",[t._v("每执行一次本命令，当前修改即被打包为一个提交记录，且前一个提交记录成为当前提交记录的父节点，当前分支头HEAD则指向当前分支。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git commit -m "..."\n')])])]),e("p",[t._v("提交前后示意如下，其中main为分支，星号表示当前处于该分支。注意commit只会移动当前分支，而不影响其它分支。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\nC0───C1\n      │\n      main*\n\n# 执行后\nC0───C1───C2\n           │\n           main*\n")])])]),e("p",[t._v("该命令参数含义如下。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v('-m "message"')]),t._v(" "),e("td",[t._v("提交说明")])]),t._v(" "),e("tr",[e("td",[t._v("-a")]),t._v(" "),e("td",[t._v("提交所有修改过的文件")])]),t._v(" "),e("tr",[e("td",[t._v("--allow-empty")]),t._v(" "),e("td",[t._v("允许空白提交")])]),t._v(" "),e("tr",[e("td",[t._v("--amend")]),t._v(" "),e("td",[t._v("对上一次的提交进行修补，不生成新的提交")])]),t._v(" "),e("tr",[e("td",[t._v("--reset-author")]),t._v(" "),e("td",[t._v("同步提交者信息")])]),t._v(" "),e("tr",[e("td",[t._v("-c [名称]")]),t._v(" "),e("td",[t._v("使用[名称]的提交说明")])])])]),t._v(" "),e("h4",{attrs:{id:"由head推送到远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#由head推送到远程仓库"}},[t._v("#")]),t._v(" 由HEAD推送到远程仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 推送到master分支\ngit push -u origin master\n")])])]),e("h2",{attrs:{id:"分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),e("p",[t._v("分支指向特定的提交记录。")]),t._v(" "),e("h3",{attrs:{id:"新建与切换分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建与切换分支"}},[t._v("#")]),t._v(" 新建与切换分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 在本地新建bugFix分支，<ref>为分支指向的位置，可省略，默认指向HEAD\ngit branch bugFix <ref>\n\n# 切换到本地bugFix分支\ngit checkout bugFix\n")])])]),e("p",[t._v("以上两条命令等同于以下一条命令。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 在本地新建bugFix分支并切换到本分支\ngit checkout -b bugFix\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\nC0───C1\n      │\n      main*\n\n# 执行后\nC0───C1\n      │\n      main\n      bugFix*\n")])])]),e("h3",{attrs:{id:"合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 将bugFix分支合并到当前分支\ngit merge bugFix\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\n           bugFix\n           │\nC0───C1───C2\n      │\n      └───C3\n           │\n           main*\n\n# 执行后\n           bugFix\n           │\nC0───C1───C2──┐\n      │       │\n      └───C3──┴─C4\n                 │\n                 main*\n")])])]),e("p",[t._v("注意，若需将bugFix分支移动到main，则运行以下命令。由于main继承自bugFix，因此Git会将bugFix移动到main处。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout bugFix\ngit merge main\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\n           bugFix\n           │\nC0───C1───C2──┐\n      │       │\n      └───C3──┴─C4\n                 │\n                 main*\n\n# 执行后\nC0───C1───C2──┐\n      │       │\n      └───C3──┴─C4\n                 │\n                 main\n                 bugFix*\n")])])]),e("p",[t._v("其余可用命令如下。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("命令")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("git diff <source_branch> <target_branch>")])]),t._v(" "),e("td",[t._v("预览差异")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git add <filename>")])]),t._v(" "),e("td",[t._v("标记为合并成功")])])])]),t._v(" "),e("h3",{attrs:{id:"变基"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变基"}},[t._v("#")]),t._v(" 变基")]),t._v(" "),e("p",[t._v("变基是另一种合并分支的方法，实际上就是取出一系列的提交记录，复制它们，然后在另外一个地方逐个的放下去。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 把bugFix分支里的工作直接移到main分支\ngit rebase main\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。注意，分支应指向最新的提交记录，运行rebase时，Git默认将从两者的公共节点出发，断开本分支与公共节点的连接，并指向指定分支以使其成为父节点。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\n           bugFix*\n           │\nC0───C1───C3\n      │\n      └───C2\n           │\n           main\n\n# 执行后\n# bugFix分支断开与公共节点C1的连接，并将其指向main处即C2\nC0───C1─ ─C3\n      │\n      └───C2───C3'\n           │    │\n        main    bugFix*\n")])])]),e("p",[t._v("注意，若需将main分支移动到bugFix，则运行以下命令。由于bugFix继承自main，因此Git会将main移动到bugFix处。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout main\ngit rebase bugFix\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\nC0───C1─ ─C3\n      │\n      └───C2───C3'\n           │    │\n       main*    bugFix\n\n# 执行后\nC0───C1─ ─C3\n      │\n      └───C2───C3'\n                │\n                main*\n                bugFix\n")])])]),e("p",[t._v("其余可用命令如下。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("命令")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("git rebase -i <分支名>")]),t._v(" "),e("td",[t._v("将当前分支移动到分支名所在位置，并交互式调整该分支名以下的提交记录")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git rebase --onto <newbase> <since> <till>")])]),t._v(" "),e("td",[t._v("把"),e("code",[t._v("<since>")]),t._v("（不含）到"),e("code",[t._v("<till>")]),t._v("（包含）之间的所有提交嫁接到"),e("code",[t._v("<newbase>")]),t._v("上")])]),t._v(" "),e("tr",[e("td",[t._v("git rebase --continue")]),t._v(" "),e("td",[t._v("变基过程暂停后继续变基操作")])]),t._v(" "),e("tr",[e("td",[t._v("git rebase --skip")]),t._v(" "),e("td",[t._v("跳过某次提交")])]),t._v(" "),e("tr",[e("td",[t._v("git rebase --abort")]),t._v(" "),e("td",[t._v("终止变基操作切换到变基前的分支")])])])]),t._v(" "),e("h3",{attrs:{id:"指定分支指向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指定分支指向"}},[t._v("#")]),t._v(" 指定分支指向")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 将main分支强制指向HEAD\ngit branch -f main HEAD\n")])])]),e("h3",{attrs:{id:"查看分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看分支"}},[t._v("#")]),t._v(" 查看分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -a\n")])])]),e("p",[t._v("输出示例如下。其中*为当前分支，前面有remotes/origin/的为远程分支，没有路径的为本地分支。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  dev\n* master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/dev\n  remotes/origin/master\n")])])]),e("h3",{attrs:{id:"删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 删除本地dev分支\ngit branch -d dev\n")])])]),e("h2",{attrs:{id:"提交树移动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交树移动"}},[t._v("#")]),t._v(" 提交树移动")]),t._v(" "),e("h3",{attrs:{id:"head"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" HEAD")]),t._v(" "),e("p",[t._v("HEAD指向最后一次提交的结果，一般指向分支名。可通过以下命令查看HEAD的指向。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 查看HEAD指向\ncat .git/HEAD\n\n# 若HEAD指向一个引用，则使用此命令\ngit symbolic-ref HEAD\n")])])]),e("p",[t._v("分离的HEAD即为让HEAD指向某个具体的提交记录而非分支名。通过哈希值可指定提交记录，命令如下。哈希值不必全部填写，填写至Git能唯一识别该提交记录时的长度即可。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 让HEAD指向提交记录C1而非分支\ngit checkout [C1的哈希值]\n")])])]),e("h3",{attrs:{id:"相对引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相对引用"}},[t._v("#")]),t._v(" 相对引用")]),t._v(" "),e("p",[t._v("相对引用符号含义如下。相对引用可连续使用。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("符号")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("^")]),t._v(" "),e("td",[t._v("向上移动一个提交记录，可连续使用")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("~<num>")])]),t._v(" "),e("td",[t._v("向上移动多个提交记录，如~3")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("^<num>")])]),t._v(" "),e("td",[t._v("移动到第"),e("code",[t._v("<num>")]),t._v("个父节点，如^2^2")])])])]),t._v(" "),e("p",[t._v("以以下命令为例。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout main^\ngit checkout HEAD^\n\n# 以上两条命令等同于以下一条命令\ngit checkout main~2\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\nC0───C1───C2\n           │\n           main*\n\n# 执行第一行命令后\nC0───C1───C2\n      │    │\n   HEAD    main\n\n# 执行第二行命令后\nC0───C1───C2\n │         │\n HEAD      main\n")])])]),e("p",[t._v("对于"),e("code",[t._v("^<num>")]),t._v("，需注意此处的"),e("code",[t._v("<num>")]),t._v("与"),e("code",[t._v("~<num>")]),t._v("的不同，示例如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout main^2\n")])])]),e("p",[t._v("假设C3为C4的第一个父节点，C2为C4的第二个父节点。执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\nC0───C1───C2──┐\n      │       │\n      └───C3──┴─C4\n                 │\n                 main*\n\n# 执行后\n           HEAD\n           │\nC0───C1───C2──┐\n      │       │\n      └───C3──┴─C4\n                 │\n                 main*\n")])])]),e("h3",{attrs:{id:"撤销变更"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销变更"}},[t._v("#")]),t._v(" 撤销变更")]),t._v(" "),e("h4",{attrs:{id:"reset命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reset命令"}},[t._v("#")]),t._v(" reset命令")]),t._v(" "),e("p",[t._v("git reset通过把分支记录回退几个提交记录来实现撤销改动。该命令对本地分支起作用。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset HEAD~1\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\nC0───C1───C2\n           │\n           main*\n\n# 执行后\nC0───C1─ ─C2\n      │\n      main*\n")])])]),e("p",[t._v("其余可用命令如下。"),e("code",[t._v("[<commit>]")]),t._v("可以省略，默认为HEAD。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("命令")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("git reset [-q][<commit>][-] <paths>")])]),t._v(" "),e("td",[t._v("不会重置引用和工作区，而是用commit下的文件替换暂存区文件，相当于撤销"),e("code",[t._v("git add <paths>")]),t._v("的操作")])]),t._v(" "),e("tr",[e("td",[t._v("git reset[--soft|--mixed|--hard|--merge|--keep][-q]["),e("commit",[t._v("]")])],1),t._v(" "),e("td",[t._v("会重置引用，但会根据不同的参数从而影响工作区或者暂存区")])])])]),t._v(" "),e("p",[t._v("各参数含义如下。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("参数")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("--hard")]),t._v(" "),e("td",[t._v("工作区、引用、暂存区全部替换为commit")])]),t._v(" "),e("tr",[e("td",[t._v("--soft")]),t._v(" "),e("td",[t._v("只更改引用，工作区和暂存区不影响")])]),t._v(" "),e("tr",[e("td",[t._v("--mixed")]),t._v(" "),e("td",[t._v("默认参数，只更改引用和暂存区，不影响工作区")])])])]),t._v(" "),e("h4",{attrs:{id:"revert命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#revert命令"}},[t._v("#")]),t._v(" revert命令")]),t._v(" "),e("p",[t._v("git revert用于撤销更改并实现共享。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git revert HEAD\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。其中C2'的内容与C1一致。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\nC0───C1───C2\n           │\n           main*\n\n# 执行后\nC0───C1───C2───C2'\n                │\n                main*\n")])])]),e("h2",{attrs:{id:"提交记录管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交记录管理"}},[t._v("#")]),t._v(" 提交记录管理")]),t._v(" "),e("h3",{attrs:{id:"提取特定提交记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提取特定提交记录"}},[t._v("#")]),t._v(" 提取特定提交记录")]),t._v(" "),e("p",[t._v("将提交记录复制到当前分支。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git cherry-pick C2 C4\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\n                     side\n                     │\nC0───C1───C2───C3───C4\n      │\n      └───C5\n           │\n           main*\n\n# 执行后\n                     side\n                     │\nC0───C1───C2───C3───C4\n      │\n      └───C5───C2'───C4'\n                      │\n                      main*\n")])])]),e("h3",{attrs:{id:"修改先前提交记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改先前提交记录"}},[t._v("#")]),t._v(" 修改先前提交记录")]),t._v(" "),e("p",[t._v("可先通过rebase命令将要修改的提交记录移到最前，完成修改并commit后，再用rebase命令调整为原来的顺序。")]),t._v(" "),e("p",[t._v("也可通过cherry-pick命令将要修改的提交记录单独复制出来，完成修改并commit后，再用cherry-pick命令复制该提交记录以后的提交记录。")]),t._v(" "),e("h3",{attrs:{id:"标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" 标签")]),t._v(" "),e("p",[t._v("即tag，也称为里程碑，用于标记某个特定的提交记录。该tag不会随着新的提交移动，永久指向该提交记录。可以通过checkout命令切换到指定的tag。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git tag V1 C1\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\nC0───C1───C2\n           │\n           main*\n\n# 执行后\nC0───C1───C2\n      │    │\n      v1   main*\n")])])]),e("p",[t._v("通过以下命令可查找离指定位置最近的标签，其中"),e("code",[t._v("<ref>")]),t._v("为任何能被Git识别成提交记录的引用，不指定则默认为HEAD。--dirty参数可选，表示如果工作区有文件修改，将会显示出来。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git describe <ref> [--dirty]\n")])])]),e("p",[t._v("输出如下。其中tag表示离ref最近的标签，numCommits表示这个ref与tag相差有多少个提交记录，hash表示给定的ref所表示的提交记录哈希值的前几位。")]),t._v(" "),e("p",[t._v("注意，当ref提交记录上有某个标签时，则只输出标签名称。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<tag>_<numCommits>_g<hash>\n")])])]),e("p",[t._v("其余可用命令如下。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("命令")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("git tag")]),t._v(" "),e("td",[t._v("显示当前版本库标签列表")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git tag <tagname> [<commit>]")])]),t._v(" "),e("td",[t._v("创建轻量级标签")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git tag -a <tagname> [<commit>]")])]),t._v(" "),e("td",[t._v("创建带说明的标签")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git tag -m <msg> <tagname> [<commit>]")])]),t._v(" "),e("td",[t._v("创建带说明的里程碑，通过-m参数提供里程碑创建说明")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git tag -s <tagname> [<commit>]")])]),t._v(" "),e("td",[t._v("创建带GnuPG签名的标签")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git tag -u <key-id> <tagname> [<commit>]")])]),t._v(" "),e("td",[t._v("创建带GnuPG签名的标签，通过-m参数提供签名ID")])]),t._v(" "),e("tr",[e("td",[t._v("git tag -n1")]),t._v(" "),e("td",[t._v("在显示标签的时候同时显示说明，使用"),e("code",[t._v("-n<num>")]),t._v("参数，显示最多"),e("code",[t._v("<num>")]),t._v("行标签的说明")])]),t._v(" "),e("tr",[e("td",[t._v("git tag -l shaofan*")]),t._v(" "),e("td",[t._v("只显示名称和通配符相符的标签")])]),t._v(" "),e("tr",[e("td",[t._v("git log --oneline --decorate")]),t._v(" "),e("td",[t._v("--decorate参数可以看到提交对应的标签及其他引用")])]),t._v(" "),e("tr",[e("td",[t._v("git tag -d tagname")]),t._v(" "),e("td",[t._v("删除本地标签")])])])]),t._v(" "),e("h2",{attrs:{id:"远程仓库管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库管理"}},[t._v("#")]),t._v(" 远程仓库管理")]),t._v(" "),e("h3",{attrs:{id:"克隆远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#克隆远程仓库"}},[t._v("#")]),t._v(" 克隆远程仓库")]),t._v(" "),e("p",[t._v("clone命令在本地仓库增加"),e("code",[t._v("<remote name>/<branch name>")]),t._v("分支，其中Git默认将远程仓库命名为origin。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# --depth参数可选\n# --depth=1即只下载最近一次的版本\ngit clone [--depth=1] git@github.com:[用户名]/[仓库名].git\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\n## 远程端\nC0───C1\n      │\n      main*\n\n# 执行后\n## 远程端\nC0───C1\n      │\n      main*\n## 本地端\nC0───C1\n      │\n      main*\n      origin/main\n")])])]),e("p",[t._v("注意，对远程分支进行commit时，Git会进入分离HEAD状态，不会更新origin/main分支。origin/main分支只有在远程仓库中相应的分支更新了以后才会更新。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout origin/main\ngit commit\n")])])]),e("h3",{attrs:{id:"从远程仓库获取提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从远程仓库获取提交"}},[t._v("#")]),t._v(" 从远程仓库获取提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# <place>可以为<destination>或<source>:<destination>\n# <source>:<destination>为refspecs，表示Git可识别的位置\n# <source>可留空\n# <remote>和<place>可省略\ngit fetch <remote> <place>\n")])])]),e("p",[t._v("命令示例如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 下载所有的提交记录到本地各个远程分支\n# 即origin/<branchname>\ngit fetch\n\n# 将远程main分支内容下载到本地origin/main分支\ngit fetch origin main\n\n# 将远程foo父节点对应的分支下载到本地bar分支\n# 注意不是本地origin/bar分支，因为bar分支可能在远程仓库中不存在\n# 若本地bar分支不存在则自动创建\ngit fetch origin foo~1:bar\n\n# 将远程空分支下载到本地bar分支\n# 由于没有分支，事实上创建了本地bar分支\ngit fetch origin :bar\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。注意本地的main分支不会被更新。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\n## 远程端\nC0───C1───C2───C3\n                │\n                main*\n## 本地端\nC0───C1\n      │\n      main*\n      origin/main\n\n# 执行后\n## 远程端\nC0───C1───C2───C3\n                │\n                main*\n## 本地端\nC0───C1───C2───C3\n      │         │\n      main*     origin/main\n")])])]),e("p",[t._v("若希望更新本地分支，可使用fetch命令后使用以下命令之一。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git cherry-pick origin/main\n# 或\ngit rebase origin/main\n# 或\ngit merge origin/main\n")])])]),e("p",[t._v("也可以直接使用pull命令。使用pull命令则无需再使用fetch命令。git pull等同于git fetch加上git merge，其参数使用与前面完全一致。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# <place>可以为<destination>或<source>:<destination>\n# <source>:<destination>为refspecs，表示Git可识别的位置\n# <source>可留空\n# <remote>和<place>可省略\ngit pull <remote> <place>\n")])])]),e("p",[t._v("命令示例如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 将远程main分支内容下载到本地origin/main分支，并完成分支合并\ngit pull origin main\n\n# 将远程main分支内容下载到本地foo分支，并完成分支合并\n# 若本地foo分支不存在则自动创建\ngit pull origin main:foo\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\n## 远程端\nC0───C1───C3\n           │\n           main*\n## 本地端\n           main*\n           │\nC0───C1───C2\n      │    \n      origin/main\n\n# 执行后\n## 远程端\nC0───C1───C3\n           │\n           main*\n## 本地端\nC0───C1───C2──┐\n      │       │\n      └───C3──┴─C4\n           │     │\n origin/main     main*\n")])])]),e("h3",{attrs:{id:"提交本地变更"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交本地变更"}},[t._v("#")]),t._v(" 提交本地变更")]),t._v(" "),e("p",[t._v("push命令将变更上传到指定的远程仓库，并在远程仓库上合并新提交记录。若分支在远程仓库中不存在，Git将会自动创建。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# <place>可以为<destination>或<source>:<destination>\n# <source>:<destination>为refspecs，表示Git可识别的位置\n# <remote>和<place>可省略\n# 不带任何参数时的行为与Git的一个名为push.default的配置有关\n# 不带任何参数时，一般为推送HEAD所在分支\ngit push <remote> <place>\n")])])]),e("p",[t._v("命令示例如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 将本地main分支推送到远程origin/main分支\ngit push origin main\n\n# 将本地foo父节点对应的分支推送到远程origin/main分支\ngit push origin foo^:main\n\n# 将本地空分支推送到远程origin/foo分支\n# 由于没有分支，事实上删除了远程origin/foo分支\ngit push origin :foo\n")])])]),e("p",[t._v("执行以上命令前后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 执行前\n## 远程端\nC0───C1\n      │\n      main*\n## 本地端\n           main*\n           │\nC0───C1───C2\n      │    \norigin/main\n\n# 执行后\n## 远程端\nC0───C1───C2\n           │\n           main*\n## 本地端\nC0───C1───C2──┐\n      │       │\n      └───C3──┴─C4\n           │     │\n origin/main     main*\n")])])]),e("h3",{attrs:{id:"历史偏离处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#历史偏离处理"}},[t._v("#")]),t._v(" 历史偏离处理")]),t._v(" "),e("p",[t._v("假设当前提交记录如下。此时执行git push将失败，因为C3基于C1，但远程仓库中已经变成了C2，Git无法确定是需要先合并分支还是直接回滚到C1。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("## 远程端\nC0───C1───C2\n           │\n           main*\n\n## 本地端\n           main*\n           │\nC0───C1───C3\n      │    \norigin/main\n")])])]),e("p",[t._v("此时可先更新本地的远程分支，然后通过rebase命令将C3移到最新的提交记录下，最后再提交即可。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git fetch\ngit rebase origin/main\ngit push\n\n# git fetch和git rebase可合并为以下命令\ngit pull --rebase\n")])])]),e("p",[t._v("执行以上命令后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("## 远程端\nC0───C1───C2───C3\n                │\n                main*\n## 本地端\n      ┌───C3\n      │\nC0───C1───C2───C3'\n                │ \n                main*\n                origin/main\n")])])]),e("p",[t._v("也可用merge代替rebase。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git fetch\ngit merge origin/main\ngit push\n\n# git fetch和git merge可合并为以下命令\ngit pull\n")])])]),e("p",[t._v("执行以上命令后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("## 远程端\nC0───C1───C2──┐\n      │       │\n      └───C3──┴─C4\n                 │\n                 main*\n\n## 本地端\nC0───C1───C2──┐\n      │       │\n      └───C3──┴─C4\n                 │\n                 main*\n                 origin/main\n")])])]),e("h3",{attrs:{id:"远程追踪分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程追踪分支"}},[t._v("#")]),t._v(" 远程追踪分支")]),t._v(" "),e("p",[t._v("以上例子中，本地的main分支与远程的origin/main分支关联。可通过以下命令修改远程追踪分支。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 新建一个新分支totallyNotMain，该分支跟踪远程分支origin/main\ngit checkout -b totallyNotMain origin/main\n\n# 将现有分支totallyNotMain设置为跟踪远程分支origin/main\n# 若当前即在totallyNotMain分支，可在以下命令中省略totallyNotMain\ngit branch -u o/main totallyNotMain\n")])])]),e("p",[t._v("执行以上命令后提交记录如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("## 远程端\nC0───C1───C2\n           │\n           main*\n\n## 本地端\nC0───C1\n      │ \n      main\n      totallyNotMain*\n      origin/main\n")])])]),e("p",[t._v("若执行git pull，则变为如下。注意main分支未被更新，git push同理。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("## 远程端\nC0───C1───C2\n           │\n           main*\n\n## 本地端\nC0───C1───C2\n      │    │\n   main    totallyNotMain*\n           origin/main\n")])])]),e("h2",{attrs:{id:"文件管理与改动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件管理与改动"}},[t._v("#")]),t._v(" 文件管理与改动")]),t._v(" "),e("h3",{attrs:{id:"查看文件状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看文件状态"}},[t._v("#")]),t._v(" 查看文件状态")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git status\n\n# 显示精简的状态信息\ngit status -s\n")])])]),e("h3",{attrs:{id:"文件忽略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件忽略"}},[t._v("#")]),t._v(" 文件忽略")]),t._v(" "),e("p",[t._v("git文件忽略需要在根目录新建.gitignore文件，作用范围是其所处的目录及其子目录，无法使用add添加。只对未加入跟踪的文件有效。")]),t._v(" "),e("p",[t._v("文件内容示例如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 忽略所有以.a为扩展名的文件\n**.a\n\n# 但lib.a文件或目录不要忽略\n!lib.a\n\n# 只忽略此目录下的TODO文件，子目录的TODO文件不忽略\n/TODO\n\n# 忽略所有build/目录下的文件\nbuild/\n\n# 忽略文件如doc/notes.txt，但是文件如doc/server/arch.txt不被忽略\ndoc/*.txt\n")])])]),e("p",[t._v("常用配置如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# dependencies  npm包文件\n/node_modules\n\n# production  打包文件\n/build\n\n# misc \n.DS_Store\n\nnpm-debug.log*\n")])])]),e("p",[t._v("可通过以下命令查看被忽略的文件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git status --ignored -s\n")])])]),e("h3",{attrs:{id:"目录显示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录显示"}},[t._v("#")]),t._v(" 目录显示")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 显示现在.git目录所在位置\ngit rev-parse --git-dir\n\n# 显示工作区根目录\ngit rev-parse --show-toplevel\n")])])]),e("h3",{attrs:{id:"大文件上传"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#大文件上传"}},[t._v("#")]),t._v(" 大文件上传")]),t._v(" "),e("p",[t._v("git对于超过100MB的文件默认不能上传，出现"),e("code",[t._v("GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.")]),t._v("错误。")]),t._v(" "),e("p",[t._v("可通过安装git-lfs解决，切换到项目目录并执行以下命令即可。注意无法对安装该工具之前的提交应用该工具。完成安装后按照正常的仓库提交流程进行即可。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git lfs install\ngit lfs track "*.psd" // psd为需要上传的大文件后缀\ngit add .gitattributes\n')])])]),e("h3",{attrs:{id:"用head中的内容替换本地改动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用head中的内容替换本地改动"}},[t._v("#")]),t._v(" 用HEAD中的内容替换本地改动")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout -- <fliename>\n")])])]),e("h3",{attrs:{id:"丢弃本地改动并从服务器获取最新版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#丢弃本地改动并从服务器获取最新版本"}},[t._v("#")]),t._v(" 丢弃本地改动并从服务器获取最新版本")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git fetch origin\ngit reset --hard origin/master\n")])])]),e("h3",{attrs:{id:"查找文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查找文件"}},[t._v("#")]),t._v(" 查找文件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git grep "content"\n')])])]),e("h3",{attrs:{id:"查看版本库中的文件列表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看版本库中的文件列表"}},[t._v("#")]),t._v(" 查看版本库中的文件列表")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git ls-files --with-tree=HEAD\n")])])]),e("h3",{attrs:{id:"拣选"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拣选"}},[t._v("#")]),t._v(" 拣选")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 显示领先提交（未被推送到上游跟踪分支中）\ngit cherry\n")])])]),e("h3",{attrs:{id:"恢复进度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#恢复进度"}},[t._v("#")]),t._v(" 恢复进度")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("命令")]),t._v(" "),e("th",[t._v("含义")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("git stash")]),t._v(" "),e("td",[t._v("保存工作进度，会分别对暂存区和工作区进行保存")])]),t._v(" "),e("tr",[e("td",[t._v("git stash list")]),t._v(" "),e("td",[t._v("显示进度列表")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git stash pop [--index] [<stash>]")])]),t._v(" "),e("td",[t._v("恢复最新一条保存进度，如果提供"),e("code",[t._v("<stash>")]),t._v("参数（来自于git stash list显示的列表）则从该"),e("code",[t._v("<stash>")]),t._v("中恢复，恢复完毕也将从进度列表中删除"),e("code",[t._v("<stash>")]),t._v("。选项--index除了恢复工作区的文件外，还尝试恢复暂存区")])]),t._v(" "),e("tr",[e("td",[t._v('git stash save "message..."')]),t._v(" "),e("td",[t._v("保存进度时候指定说明。使用参数--patch会显示工作区和HEAD的差异，使用-k或--keep-index参数在保存进度后不会将暂存区重置")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git stash drop [<stash>]")])]),t._v(" "),e("td",[t._v("删除一个存储的进度，默认删除最新的进度")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git stash apply [--index] [<stash>]")])]),t._v(" "),e("td",[t._v("除了不删除恢复的进度之外，其余和git stash drop命令一样")])]),t._v(" "),e("tr",[e("td",[t._v("git stash clear")]),t._v(" "),e("td",[t._v("删除所有存储的进度")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("git stash branch <branchname> <stash>")])]),t._v(" "),e("td",[t._v("基于进度创建分支")])])])]),t._v(" "),e("h3",{attrs:{id:"反转提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反转提交"}},[t._v("#")]),t._v(" 反转提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 将HEAD的提交反向再提交一次\ngit rever HEAD\n")])])]),e("h3",{attrs:{id:"补丁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#补丁"}},[t._v("#")]),t._v(" 补丁")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 最近三次提交生成补丁文件\ngit format-patch -s HEAD~3..HEAD\n\n# 应用补丁\ncat *.patch | git am\n")])])]),e("h2",{attrs:{id:"日志管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#日志管理"}},[t._v("#")]),t._v(" 日志管理")]),t._v(" "),e("h3",{attrs:{id:"查看日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看日志"}},[t._v("#")]),t._v(" 查看日志")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log\n")])])]),e("p",[t._v("可加以下参数。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("--pretty=fuller\n--pretty=oneline\n")])])]),e("h3",{attrs:{id:"查看操作日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看操作日志"}},[t._v("#")]),t._v(" 查看操作日志")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 显示master分支最近五次操作日志\ngit reflog show master | head -5\n\n# 显示HEAD分支最近一次操作日志\ngit reflog -1\n")])])]),e("h2",{attrs:{id:"主程序管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主程序管理"}},[t._v("#")]),t._v(" 主程序管理")]),t._v(" "),e("h3",{attrs:{id:"更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新"}},[t._v("#")]),t._v(" 更新")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git update-git-for-windows\n")])])]),e("h3",{attrs:{id:"彩色git输出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#彩色git输出"}},[t._v("#")]),t._v(" 彩色git输出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config color.ui true\n")])])]),e("h3",{attrs:{id:"git配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git配置"}},[t._v("#")]),t._v(" git配置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config\n")])])]),e("h3",{attrs:{id:"设置缓存区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置缓存区"}},[t._v("#")]),t._v(" 设置缓存区")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 增加git缓存区大小\ngit config --global http.postBuffer 2000000000\n\n# 压缩配置\ngit config --global core.compression -1 \n\n# 修改配置文件\nexport GIT_TRACE_PACKET=1\nexport GIT_TRACE=1\nexport GIT_CURL_VERBOSE=1\n")])])]),e("h2",{attrs:{id:"下载加速"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下载加速"}},[t._v("#")]),t._v(" 下载加速")]),t._v(" "),e("h3",{attrs:{id:"通过gitee"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过gitee"}},[t._v("#")]),t._v(" 通过Gitee")]),t._v(" "),e("p",[t._v("打开以下链接并完成注册和登录。然后创建仓库，在新建仓库页选择"),e("code",[t._v("导入已有仓库")]),t._v("，复制需要下载的git链接，点击创建，然后下载即可。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://gitee.com/\n")])])]),e("h3",{attrs:{id:"通过镜像站"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过镜像站"}},[t._v("#")]),t._v(" 通过镜像站")]),t._v(" "),e("p",[t._v("可通过以下网站代替github.com进行访问。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.iapk.cc\nhttps://hub.fastgit.org\nhttps://github.bajins.com\nhttps://github.com.cnpmjs.org\nhttps://github.wuyanzheshui.workers.dev\n")])])]),e("p",[t._v("也可使用Fast Github，游猴脚本如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://greasyfork.org/zh-CN/scripts/397419\n")])])]),e("h3",{attrs:{id:"通过代下载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过代下载"}},[t._v("#")]),t._v(" 通过代下载")]),t._v(" "),e("p",[t._v("可通过以下网站进行代下载。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://g.widora.cn/\nhttps://www.toolwa.com/github/\nhttps://git.best/\nhttps://g.ioiox.com/\nhttps://shrill-pond-3e81.hunsh.workers.dev/\nhttps://gh.api.99988866.xyz/\nhttps://github.zhlh6.cn/\nhttps://gitclone.com/\nhttp://gitd.cc/\nhttps://githubd.com/#/\nhttps://d.serctl.com/\nhttp://www.toolzl.com/tools/githubjiasu.html\nhttps://github.zhlh6.cn/\n")])])]),e("h3",{attrs:{id:"通过插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过插件"}},[t._v("#")]),t._v(" 通过插件")]),t._v(" "),e("h4",{attrs:{id:"chrome插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chrome插件"}},[t._v("#")]),t._v(" Chrome插件")]),t._v(" "),e("p",[t._v("可通过"),e("code",[t._v("Github加速")]),t._v("插件，下载链接如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://fhefh2015.github.io/Fast-GitHub/\nhttps://ltribe.lanzoui.com/i3iAGi1xxdi\nhttps://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/mfnkflidjnladnkldfonnaicljppahpg\n")])])]),e("h4",{attrs:{id:"游猴插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#游猴插件"}},[t._v("#")]),t._v(" 游猴插件")]),t._v(" "),e("p",[t._v("可通过"),e("code",[t._v("Github增强")]),t._v("插件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://greasyfork.org/scripts/412245\n")])])]),e("h3",{attrs:{id:"通过cdn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过cdn"}},[t._v("#")]),t._v(" 通过CDN")]),t._v(" "),e("p",[t._v("通过以下链接即可。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://cdn.jsdelivr.net/gh/[Github用户名]/[GitHub仓库名]@[版本号，没版本号可以不填]/file\n")])])]),e("p",[t._v("也可将raw.githubusercontent.com替换为raw.staticdn.net。")]),t._v(" "),e("h3",{attrs:{id:"通过自建服务器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过自建服务器"}},[t._v("#")]),t._v(" 通过自建服务器")]),t._v(" "),e("h4",{attrs:{id:"部署到cloudflare-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署到cloudflare-worker"}},[t._v("#")]),t._v(" 部署到Cloudflare Worker")]),t._v(" "),e("p",[t._v("打开以下链接并登录，新建一个Worker。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://workers.cloudflare.com\n")])])]),e("p",[t._v("复制以下代码到左侧代码框后进行部署，即可通过Worker所分配的网站进入部署好的Github加速站点。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("'use strict'\n\n/**\n * static files (404.html, sw.js, conf.js)\n */\nconst ASSET_URL = 'https://hunshcn.github.io/gh-proxy/'\n// 前缀，如果自定义路由为example.com/gh/*，将PREFIX改为 '/gh/'，注意，少一个杠都会错！\nconst PREFIX = '/'\n// git使用cnpmjs镜像、分支文件使用jsDelivr镜像的开关，0为关闭，默认开启\nconst Config = {\n    jsdelivr: 1,\n    cnpmjs: 1\n}\n\n/** @type {RequestInit} */\nconst PREFLIGHT_INIT = {\n    status: 204,\n    headers: new Headers({\n        'access-control-allow-origin': '*',\n        'access-control-allow-methods': 'GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS',\n        'access-control-max-age': '1728000',\n    }),\n}\n\n/**\n * @param {any} body\n * @param {number} status\n * @param {Object<string, string>} headers\n */\nfunction makeRes(body, status = 200, headers = {}) {\n    headers['access-control-allow-origin'] = '*'\n    return new Response(body, {status, headers})\n}\n\n\n/**\n * @param {string} urlStr\n */\nfunction newUrl(urlStr) {\n    try {\n        return new URL(urlStr)\n    } catch (err) {\n        return null\n    }\n}\n\n\naddEventListener('fetch', e => {\n    const ret = fetchHandler(e)\n        .catch(err => makeRes('cfworker error:\\n' + err.stack, 502))\n    e.respondWith(ret)\n})\n\n\n/**\n * @param {FetchEvent} e\n */\nasync function fetchHandler(e) {\n    const req = e.request\n    const urlStr = req.url\n    const urlObj = new URL(urlStr)\n    let path = urlObj.searchParams.get('q')\n    if (path) {\n        return Response.redirect('https://' + urlObj.host + PREFIX + path, 301)\n    }\n    // cfworker 会把路径中的 `//` 合并成 `/`\n    path = urlObj.href.substr(urlObj.origin.length + PREFIX.length).replace(/^https?:\\/+/, 'https://')\n    const exp1 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:releases|archive)\\/.*$/i\n    const exp2 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:blob)\\/.*$/i\n    const exp3 = /^(?:https?:\\/\\/)?github\\.com\\/.+?\\/.+?\\/(?:info|git-).*$/i\n    const exp4 = /^(?:https?:\\/\\/)?raw\\.githubusercontent\\.com\\/.+?\\/.+?\\/.+?\\/.+$/i\n    if (path.search(exp1) === 0 || !Config.cnpmjs && (path.search(exp3) === 0 || path.search(exp4) === 0)) {\n        return httpHandler(req, path)\n    } else if (path.search(exp2) === 0) {\n        if (Config.jsdelivr){\n            const newUrl = path.replace('/blob/', '@').replace(/^(?:https?:\\/\\/)?github\\.com/, 'https://cdn.jsdelivr.net/gh')\n            return Response.redirect(newUrl, 302)\n        }else{\n            path = path.replace('/blob/', '/raw/')\n            return httpHandler(req, path)\n        }\n    } else if (path.search(exp3) === 0) {\n        const newUrl = path.replace(/^(?:https?:\\/\\/)?github\\.com/, 'https://github.com.cnpmjs.org')\n        return Response.redirect(newUrl, 302)\n    } else if (path.search(exp4) === 0) {\n        const newUrl = path.replace(/(?<=com\\/.+?\\/.+?)\\/(.+?\\/)/, '@$1').replace(/^(?:https?:\\/\\/)?raw\\.githubusercontent\\.com/, 'https://cdn.jsdelivr.net/gh')\n        return Response.redirect(newUrl, 302)\n    } else {\n        return fetch(ASSET_URL + path)\n    }\n}\n\n\n/**\n * @param {Request} req\n * @param {string} pathname\n */\nfunction httpHandler(req, pathname) {\n    const reqHdrRaw = req.headers\n\n    // preflight\n    if (req.method === 'OPTIONS' &&\n        reqHdrRaw.has('access-control-request-headers')\n    ) {\n        return new Response(null, PREFLIGHT_INIT)\n    }\n\n    let rawLen = ''\n\n    const reqHdrNew = new Headers(reqHdrRaw)\n\n    let urlStr = pathname\n    if (urlStr.startsWith('github')) {\n        urlStr = 'https://' + urlStr\n    }\n    const urlObj = newUrl(urlStr)\n\n    /** @type {RequestInit} */\n    const reqInit = {\n        method: req.method,\n        headers: reqHdrNew,\n        redirect: 'follow',\n        body: req.body\n    }\n    return proxy(urlObj, reqInit, rawLen, 0)\n}\n\n\n/**\n *\n * @param {URL} urlObj\n * @param {RequestInit} reqInit\n */\nasync function proxy(urlObj, reqInit, rawLen) {\n    const res = await fetch(urlObj.href, reqInit)\n    const resHdrOld = res.headers\n    const resHdrNew = new Headers(resHdrOld)\n\n    // verify\n    if (rawLen) {\n        const newLen = resHdrOld.get('content-length') || ''\n        const badLen = (rawLen !== newLen)\n\n        if (badLen) {\n            return makeRes(res.body, 400, {\n                '--error': `bad len: ${newLen}, except: ${rawLen}`,\n                'access-control-expose-headers': '--error',\n            })\n        }\n    }\n    const status = res.status\n    resHdrNew.set('access-control-expose-headers', '*')\n    resHdrNew.set('access-control-allow-origin', '*')\n\n    resHdrNew.delete('content-security-policy')\n    resHdrNew.delete('content-security-policy-report-only')\n    resHdrNew.delete('clear-site-data')\n\n    return new Response(res.body, {\n        status,\n        headers: resHdrNew,\n    })\n}\n")])])]),e("h4",{attrs:{id:"部署到vps"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部署到vps"}},[t._v("#")]),t._v(" 部署到VPS")]),t._v(" "),e("p",[t._v("连接到服务器并执行以下命令部署docker，其中第一个80表示要暴露的端口。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('docker run -d --name="gh-proxy-py" -p 0.0.0.0:80:80 --restart=always hunsh/gh-proxy-py:latest\n')])])]),e("p",[t._v("通过以下命令安装依赖，注意应当使用python 3。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("pip install flask requests\n")])])]),e("p",[t._v("新建main.py并填写以下内容，其中部分选项根据注释进行修改。修改完成后保存并运行该脚本即可。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# -*- coding: utf-8 -*-\nimport re\n\nimport requests\nfrom flask import Flask, Response, redirect, request\nfrom requests.exceptions import (\n    ChunkedEncodingError,\n    ContentDecodingError, ConnectionError, StreamConsumedError)\nfrom requests.utils import (\n    stream_decode_response_unicode, iter_slices)\nfrom urllib3.exceptions import (\n    DecodeError, ReadTimeoutError, ProtocolError)\n\n# config\n# git使用cnpmjs镜像、分支文件使用jsDelivr镜像的开关，0为关闭，默认开启\njsdelivr = 1\ncnpmjs = 1\nsize_limit = 1024 * 1024 * 1024 * 999  # 允许的文件大小，默认999GB，相当于无限制了 https://github.com/hunshcn/gh-proxy/issues/8\nHOST = '127.0.0.1'  # 监听地址，建议监听本地然后由web服务器反代\nPORT = 80  # 监听端口\nASSET_URL = 'https://hunshcn.github.io/gh-proxy'  # 主页\n\napp = Flask(__name__)\nCHUNK_SIZE = 1024 * 10\nindex_html = requests.get(ASSET_URL, timeout=10).text\nexp1 = re.compile(r'^(?:https?://)?github\\.com/.+?/.+?/(?:releases|archive)/.*$')\nexp2 = re.compile(r'^(?:https?://)?github\\.com/.+?/.+?/(?:blob)/.*$')\nexp3 = re.compile(r'^(?:https?://)?github\\.com/.+?/.+?/(?:info|git-).*$')\nexp4 = re.compile(r'^(?:https?://)?raw\\.githubusercontent\\.com/.+?/.+?/.+?/.+$')\n\n\n@app.route('/')\ndef index():\n    if 'q' in request.args:\n        return redirect('/' + request.args.get('q'))\n    return index_html\n\n\ndef iter_content(self, chunk_size=1, decode_unicode=False):\n    \"\"\"rewrite requests function, set decode_content with False\"\"\"\n\n    def generate():\n        # Special case for urllib3.\n        if hasattr(self.raw, 'stream'):\n            try:\n                for chunk in self.raw.stream(chunk_size, decode_content=False):\n                    yield chunk\n            except ProtocolError as e:\n                raise ChunkedEncodingError(e)\n            except DecodeError as e:\n                raise ContentDecodingError(e)\n            except ReadTimeoutError as e:\n                raise ConnectionError(e)\n        else:\n            # Standard file-like object.\n            while True:\n                chunk = self.raw.read(chunk_size)\n                if not chunk:\n                    break\n                yield chunk\n\n        self._content_consumed = True\n\n    if self._content_consumed and isinstance(self._content, bool):\n        raise StreamConsumedError()\n    elif chunk_size is not None and not isinstance(chunk_size, int):\n        raise TypeError(\"chunk_size must be an int, it is instead a %s.\" % type(chunk_size))\n    # simulate reading small chunks of the content\n    reused_chunks = iter_slices(self._content, chunk_size)\n\n    stream_chunks = generate()\n\n    chunks = reused_chunks if self._content_consumed else stream_chunks\n\n    if decode_unicode:\n        chunks = stream_decode_response_unicode(chunks, self)\n\n    return chunks\n\n\n@app.route('/<path:u>', methods=['GET', 'POST'])\ndef proxy(u):\n    u = u if u.startswith('http') else 'https://' + u\n    u = u.replace(':/g', '://g', 1)  # uwsgi会将//传递为/\n    if jsdelivr and exp2.match(u):\n        u = u.replace('/blob/', '@', 1).replace('github.com', 'cdn.jsdelivr.net/gh', 1)\n        return redirect(u)\n    elif cnpmjs and exp3.match(u):\n        u = u.replace('github.com', 'github.com.cnpmjs.org', 1) + request.url.replace(request.base_url, '', 1)\n        return redirect(u)\n    elif jsdelivr and exp4.match(u):\n        u = re.sub(r'(\\.com/.*?/.+?)/(.+?/)', r'\\1@\\2', u, 1)\n        u = u.replace('raw.githubusercontent.com', 'cdn.jsdelivr.net/gh', 1)\n        return redirect(u)\n    else:\n        if exp2.match(u):\n            u = u.replace('/blob/', '/raw/', 1)\n        headers = {}\n        r_headers = {}\n        for i in ['Range', 'User-Agent']:\n            if i in request.headers:\n                r_headers[i] = request.headers.get(i)\n        r_headers['Accept-Encoding'] = request.headers.get('Accept-Encoding', 'identity')\n        try:\n            url = u + request.url.replace(request.base_url, '', 1)\n            if url.startswith('https:/') and not url.startswith('https://'):\n                url = 'https://' + url[7:]\n            r = requests.request(method=request.method, url=url, data=request.data, headers=r_headers, stream=True)\n            for i in ['Content-Range', 'Content-Type']:\n                if i in r.headers:\n                    headers[i] = r.headers.get(i)\n            if r.status_code == 200:\n                headers = dict(r.headers)\n            try:\n                headers.pop('Transfer-Encoding')\n            except KeyError:\n                pass\n\n            if 'Content-length' in r.headers and int(r.headers['Content-length']) > size_limit:\n                return redirect(u + request.url.replace(request.base_url, '', 1))\n\n            def generate():\n                for chunk in iter_content(r, chunk_size=CHUNK_SIZE):\n                    yield chunk\n\n            return Response(generate(), headers=headers, status=r.status_code)\n        except Exception as e:\n            headers['content-type'] = 'text/html; charset=UTF-8'\n            return Response('server error ' + str(e), status=500, headers=headers)\n    # else:\n    #     return Response('Illegal input', status=403, mimetype='text/html; charset=UTF-8')\n\n\nif __name__ == '__main__':\n    app.run(host=HOST, port=PORT)\n")])])]),e("h3",{attrs:{id:"通过fastgit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过fastgit"}},[t._v("#")]),t._v(" 通过FastGit")]),t._v(" "),e("h4",{attrs:{id:"基础使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础使用"}},[t._v("#")]),t._v(" 基础使用")]),t._v(" "),e("p",[t._v("各命令替换如下。")]),t._v(" "),e("p",[t._v("对于"),e("code",[t._v("https://raw.githubusercontent.com/")]),t._v("，可替换为"),e("code",[t._v("https://raw.fastgit.org/")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 克隆\n# 假设仓库为https://github.com/author/repo\ngit clone https://hub.fastgit.org/author/repo\n\n# Release\n# 假设下载链接为https://github.com/A/A/releases/download/1.0/1.0.tar.gz\nwget https://download.fastgit.org/A/A/releases/download/1.0/1.0.tar.gz\n\n# Codeload\n# 假设下载链接为 https://hub.fastgit.org/A/A/archive/master.zip\n# 或者 https://codeload.github.com/A/A/zip/master\nwget https://download.fastgit.org/A/A/archive/master.zip\n")])])]),e("h4",{attrs:{id:"fgit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fgit"}},[t._v("#")]),t._v(" fgit")]),t._v(" "),e("p",[t._v("可通过安装fgit，在克隆项目时直接完成链接替换。下载以下项目并解压。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/FastGitORG/fgit\n")])])]),e("p",[t._v("完成解压后，对于Linux，终端切换到解压好的目录后执行以下命令。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("sudo cp ./bin/fgit.sh /usr/local/bin\n")])])]),e("p",[t._v("对于Windows则将fgit/scripts加入到环境变量(PATH)中。")]),t._v(" "),e("p",[t._v("完成后即可在终端通过以下命令克隆项目。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fgit https://github.com/author/repo\n")])])]),e("h4",{attrs:{id:"油猴脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#油猴脚本"}},[t._v("#")]),t._v(" 油猴脚本")]),t._v(" "),e("p",[t._v("Fastgit油猴脚本链接如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://greasyfork.org/zh-CN/scripts/402301-fastgit\n")])])]),e("h3",{attrs:{id:"通过microsoft-azure-notebooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过microsoft-azure-notebooks"}},[t._v("#")]),t._v(" 通过Microsoft Azure Notebooks")]),t._v(" "),e("p",[t._v("打开以下链接并登录微软账号。新建一个notebook环境并预装Git，然后使用git或者wget命令将Github资源下载到微软服务器，再从微软下载。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://notebooks.azure.com/\n")])])]),e("h3",{attrs:{id:"通过代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过代理"}},[t._v("#")]),t._v(" 通过代理")]),t._v(" "),e("p",[t._v("可通过以下命令设置代理。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config --global http.proxy 'socks5://127.0.0.1:1080'\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n")])])]),e("p",[t._v("可通过以下命令取消。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config --global --unset https.proxy 'socks5://127.0.0.1:1080'\ngit config --global --unset http.proxy 'socks5://127.0.0.1:1080'\n")])])]),e("h3",{attrs:{id:"通过hosts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过hosts"}},[t._v("#")]),t._v(" 通过hosts")]),t._v(" "),e("h4",{attrs:{id:"自动修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动修改"}},[t._v("#")]),t._v(" 自动修改")]),t._v(" "),e("p",[t._v("可使用UsbEAm Hosts Editor修改，下载链接如下。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://www.dogfight360.com/blog/475/\n")])])]),e("h4",{attrs:{id:"手动修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手动修改"}},[t._v("#")]),t._v(" 手动修改")]),t._v(" "),e("h5",{attrs:{id:"查询ip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查询ip"}},[t._v("#")]),t._v(" 查询IP")]),t._v(" "),e("p",[t._v("通过以下网站查询"),e("code",[t._v("global-ssl.fastly.Net")]),t._v("和"),e("code",[t._v("github.com")]),t._v("的公网地址，选择一个稳定且延迟较低的IP并记录。注意不要直接在终端ping该网址，因为经常会发生DNS污染。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("http://tool.chinaz.com/dns/\nhttps://www.ipaddress.com/\n")])])]),e("p",[t._v("也可通过以下链接直接获取。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/ineo6/hosts\n")])])]),e("h5",{attrs:{id:"添加配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加配置"}},[t._v("#")]),t._v(" 添加配置")]),t._v(" "),e("h6",{attrs:{id:"通过直接修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过直接修改"}},[t._v("#")]),t._v(" 通过直接修改")]),t._v(" "),e("p",[t._v("将以下代码添加到"),e("code",[t._v("hosts")]),t._v("文件，其中xxx部分替换为上面所查到的IP地址。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// Windows下hosts文件位于C:\\Windows\\System32\\drivers\\etc\\hosts\n// Mac/Linux下hosts文件位于/etc/hosts\n\nxxx.xxx.xxx.xxx github.com\nxxx.xxx.xxx.xxx github.global.ssl.fastly.net  \n")])])]),e("p",[t._v("重启浏览器，或在终端（命令行）输入以下命令以刷新DNS缓存即可。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// Linux/Mac\nsudo /etc/init.d/networking restart\n\n// Windows\nipconfig /flushdns\n")])])]),e("h6",{attrs:{id:"通过switchhosts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过switchhosts"}},[t._v("#")]),t._v(" 通过SwitchHosts!")]),t._v(" "),e("p",[t._v("下载地址如下。在My Hosts中填写上面查询到的IP和域名，然后开启该配置文件即可。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/oldj/SwitchHosts\n")])])]),e("p",[t._v("也可通过订阅hosts规则的方式，避免手动更新域名和IP。点击+号，Type选择Remote，URL如下，Auto Refresh建议选择1 hour。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://cdn.jsdelivr.net/gh/ineo6/hosts/hosts\n")])])]),e("h1",{attrs:{id:"github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[t._v("#")]),t._v(" Github")]),t._v(" "),e("h2",{attrs:{id:"分支管理-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支管理-2"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),e("h3",{attrs:{id:"新建分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新建分支"}},[t._v("#")]),t._v(" 新建分支")]),t._v(" "),e("p",[t._v("在仓库中点击Branch，在搜索框中输入要新建的分支的名字，系统会自动弹出Create branch的窗口，点击即可。")]),t._v(" "),e("h3",{attrs:{id:"设置默认分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置默认分支"}},[t._v("#")]),t._v(" 设置默认分支")]),t._v(" "),e("p",[t._v("在仓库中点击Settings，在侧栏选择Branches，选择新的默认分支即可。")]),t._v(" "),e("h3",{attrs:{id:"pull-request"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pull-request"}},[t._v("#")]),t._v(" Pull Request")]),t._v(" "),e("p",[t._v("即PR。部分仓库不允许直接push，需要通过Pull Request提交更新。对代码进行修改后通知仓库作者并请求作者合并自己的修改，即完成一次Pull Request。")]),t._v(" "),e("p",[t._v("在Github上fork项目，并进行修改。切换到需要PR的分支，点击New pull request即可。")]),t._v(" "),e("h2",{attrs:{id:"github-action"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-action"}},[t._v("#")]),t._v(" Github Action")]),t._v(" "),e("h3",{attrs:{id:"准备工作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[t._v("#")]),t._v(" 准备工作")]),t._v(" "),e("p",[t._v("打开Github，点击Settings-Seveloper settings-Personal access tokens，选择"),e("code",[t._v("Generate new token")]),t._v("，勾选"),e("code",[t._v("repo")]),t._v("，"),e("code",[t._v("admin:repo_hook")]),t._v("，"),e("code",[t._v("workflow")]),t._v("后点击"),e("code",[t._v("Generate token")]),t._v("即可。")]),t._v(" "),e("p",[t._v("完成Github Action的设置后，可通过随意commit或点击"),e("code",[t._v("Star")]),t._v("以激活功能。")]),t._v(" "),e("h3",{attrs:{id:"可用项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可用项目"}},[t._v("#")]),t._v(" 可用项目")]),t._v(" "),e("h4",{attrs:{id:"天翼云盘自动签到"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#天翼云盘自动签到"}},[t._v("#")]),t._v(" 天翼云盘自动签到")]),t._v(" "),e("p",[t._v("打开以下链接并Fork项目。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/malaohu/Cloud189Checkin-Actions\n")])])]),e("p",[t._v("点击Settings-Secrets，添加以下Secrets。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("名称 / USER\n内容 / 账号（可用空格分隔多个账号）\n\n名称 / PWD\n内容 / 密码（可用空格分隔多个账号）\n")])])]),e("p",[t._v("保存后点击Actions，并开启功能。然后打开README.md，随意编辑后提交更改即可。")]),t._v(" "),e("h2",{attrs:{id:"获取token"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取token"}},[t._v("#")]),t._v(" 获取Token")]),t._v(" "),e("p",[t._v("网页登录github账号后，点击Settings-Developer settings-Personal access tokens，点击Generate Token即可。注意生成后需马上复制该Token，否则第二次将无法复制。")]),t._v(" "),e("h2",{attrs:{id:"仓库收集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#仓库收集"}},[t._v("#")]),t._v(" 仓库收集")]),t._v(" "),e("h3",{attrs:{id:"chinese-independent-developer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chinese-independent-developer"}},[t._v("#")]),t._v(" chinese-independent-developer")]),t._v(" "),e("p",[t._v("开源项目合集。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/1c7/chinese-independent-developer\n")])])]),e("h3",{attrs:{id:"singlefile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#singlefile"}},[t._v("#")]),t._v(" SingleFile")]),t._v(" "),e("p",[t._v("将网页保存为HTML文件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/gildas-lormeau/SingleFile\n")])])]),e("h3",{attrs:{id:"handright"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#handright"}},[t._v("#")]),t._v(" Handright")]),t._v(" "),e("p",[t._v("模拟中文手写的轻量级Python库。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/Gsllchb/Handright\n")])])]),e("h3",{attrs:{id:"cc-attack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cc-attack"}},[t._v("#")]),t._v(" CC-attack")]),t._v(" "),e("p",[t._v("进行DDOS攻击。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/Leeon123/CC-attack\n")])])]),e("h3",{attrs:{id:"manim"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#manim"}},[t._v("#")]),t._v(" manim")]),t._v(" "),e("p",[t._v("3b1b使用的数学绘图库。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/3b1b/manim\n")])])]),e("h3",{attrs:{id:"wkhtmltopdf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wkhtmltopdf"}},[t._v("#")]),t._v(" wkhtmltopdf")]),t._v(" "),e("p",[t._v("将HTML渲染为PDF和各种图像格式的命令行工具。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/wkhtmltopdf/wkhtmltopdf\nhttps://wkhtmltopdf.org/\n")])])]),e("h3",{attrs:{id:"rw-password"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rw-password"}},[t._v("#")]),t._v(" RW_Password")]),t._v(" "),e("p",[t._v("提取收集以往泄露的密码中符合条件的强弱密码。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/r35tart/RW_Password\n")])])]),e("h3",{attrs:{id:"raspberry-pi-sync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#raspberry-pi-sync"}},[t._v("#")]),t._v(" raspberry-pi-sync")]),t._v(" "),e("p",[t._v("在树莓派上安装Resilio Sync。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/willjasen/raspberry-pi-sync\n")])])]),e("h3",{attrs:{id:"wechatmomentscreenshot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wechatmomentscreenshot"}},[t._v("#")]),t._v(" WechatMomentScreenshot")]),t._v(" "),e("p",[t._v("朋友圈转发截图生成工具。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://akarin.dev/WechatMomentScreenshot/\nhttps://github.com/TransparentLC/WechatMomentScreenshot\n")])])]),e("h3",{attrs:{id:"croc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#croc"}},[t._v("#")]),t._v(" croc")]),t._v(" "),e("p",[t._v("任意两台电脑互传文件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/schollz/croc\n")])])]),e("h1",{attrs:{id:"github-gist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-gist"}},[t._v("#")]),t._v(" Github Gist")]),t._v(" "),e("p",[t._v("随时编写代码并记录。可设为仅自己可见即secret，或全体可见即public。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://gist.github.com/\n")])])]),e("p",[t._v("可通过Lepton管理自己的Github Gist。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/hackjutsu/Lepton\n")])])]),e("h1",{attrs:{id:"参考教程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考教程"}},[t._v("#")]),t._v(" 参考教程")]),t._v(" "),e("h2",{attrs:{id:"gitbook"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitbook"}},[t._v("#")]),t._v(" gitbook")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://git-scm.com/book/zh/v2\n")])])]),e("h2",{attrs:{id:"git的基本用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git的基本用法"}},[t._v("#")]),t._v(" git的基本用法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://www.cnblogs.com/manjin666/p/9634324.html\n")])])]),e("h2",{attrs:{id:"git命令汇总"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git命令汇总"}},[t._v("#")]),t._v(" GIT命令汇总")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("http://shaofan.org/git-2/\n")])])]),e("h2",{attrs:{id:"git-large-file-storage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-large-file-storage"}},[t._v("#")]),t._v(" Git Large File Storage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://git-lfs.github.com/\n")])])]),e("h2",{attrs:{id:"gitignore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[t._v("#")]),t._v(" .gitignore")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://www.jianshu.com/p/699ed86028c2\n")])])]),e("h2",{attrs:{id:"hunshcn-gh-proxy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hunshcn-gh-proxy"}},[t._v("#")]),t._v(" hunshcn/gh-proxy")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/hunshcn/gh-proxy\n")])])]),e("h2",{attrs:{id:"fastgit简体中文指南"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fastgit简体中文指南"}},[t._v("#")]),t._v(" FastGit简体中文指南")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://doc.fastgit.org/zh-cn/\n")])])]),e("h2",{attrs:{id:"如何提高国内访问github的速度到2mb-s以上-评布客博客"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何提高国内访问github的速度到2mb-s以上-评布客博客"}},[t._v("#")]),t._v(" 如何提高国内访问Github的速度到2MB/s以上 | 评布客博客")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://code.seniortesting.club/blog/2020/How-To-Speed-Github.html\n")])])]),e("h2",{attrs:{id:"learn-git-branching"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#learn-git-branching"}},[t._v("#")]),t._v(" Learn Git Branching")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://learngitbranching.js.org/?locale=zh_CN\n")])])]),e("h2",{attrs:{id:"pull-request-的命令行管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pull-request-的命令行管理"}},[t._v("#")]),t._v(" Pull Request 的命令行管理")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("http://www.ruanyifeng.com/blog/2017/07/pull_request.html\n")])])]),e("h2",{attrs:{id:"如何解决类似-curl-7-failed-to-connect-to-raw-githubusercontent-com-port-443-connection-refused-的问题-10"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何解决类似-curl-7-failed-to-connect-to-raw-githubusercontent-com-port-443-connection-refused-的问题-10"}},[t._v("#")]),t._v(" 如何解决类似 curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused 的问题 #10")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("https://github.com/hawtim/blog/issues/10\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);